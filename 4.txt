旋转数组的最小数字
import java.util.ArrayList;
public class Solution {
    public int minNumberInRotateArray(int [] array) {
    //二分法
        int low=0;
        int high=array.length-1;
        while(low<high)
        {
            int mid=low+(high-low)/2;
            if(array[mid]<array[high])
            {
                high=mid;
            }
            else if(array[mid]==array[high])
            {
                high=high-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return array[low];
    }
}
------------------------------------------------------
用两个栈实现队列
import java.util.Stack;

public class Solution {
    Stack<Integer> stack1 = new Stack<Integer>();
    Stack<Integer> stack2 = new Stack<Integer>();
    //先将元素加入到栈1中
    public void push(int node) {
        stack1.push(node);
        System.out.println("压入栈元素："+node);
    }
    //删除一个元素时，如果栈2不为空，则弹出栈顶元素，如果栈2为空，则把栈1元素
    //全部弹出压入栈2，再从栈2顶部弹出
    public int pop() {
        if (stack2.size()==0)
            while(!stack1.empty())
            {
                stack2.push(stack1.pop());
            }
        return stack2.pop();
    }
}