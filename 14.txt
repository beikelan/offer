数字在排序中出现的次数
public class Solution {
    public int GetNumberOfK(int[] array , int k) {
       //思路1：用hashmap统计每个数字出现的次数
        //思路2：直接遍历
        //思路2：二分查找 找k 
        int times=0;
        int first=getfirst(array,k,0,array.length-1);
        int last=getlast(array,k,0,array.length-1);
        if(first>-1&&last>-1)times=last-first+1;
        return times;
    }
        private static int getfirst(int [] a,int k,int start,int end){
                if(start>end)return -1;
                int mid=(start+end)/2;
                if(a[mid]==k){
                     if(mid>0&&a[mid-1]!=k||mid==0)
                        return mid;
                    else
                        end=mid-1;
                }else if(mid>k){
                        end=mid-1; }
                 else
                        start=mid+1;
                 return getfirst(a,k,start,end);
                }
 

      private  static int getlast(int[] a,int k,int start,int end){
                if(start>end)return -1;
                int mid=(start+end)/2;
                if(a[mid]==k){
                     if(mid<end&&a[mid+1]!=k||mid==end)
                        return mid;
                     else
                        start=mid+1;
                }else if(mid<k){
                        start=mid+1; 
                    }
                else
                        end=mid-1;
                return getlast(a,k,start,end);
                }
     }
	 ---------------------------------------------
	 两个链表的第一个公共节点
	 import java.util.HashMap;
/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*///顺序比较链表，这种思路显然是错的，两个链表长度不一样时，第一个公共节点在两个链表中对应的位置不一样

//第一个公共节点后面的所有节点必然相同
//思路1：计算链表长度，让长链表先移动长度差的距离，再顺序比较
//思路2：用hashmap存链表1，判断链表2在不在里面
public class Solution {
    public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
       ListNode cur1 = pHead1;        
        ListNode cur2 = pHead2;         
        HashMap<ListNode, Integer> hashMap = new HashMap<ListNode, Integer>();        
        while (cur1 != null) {            
            hashMap.put(cur1, null);            
            cur1 = cur1.next;        
        }       
        while (cur2 != null) {           
            if (hashMap.containsKey(cur2))                
                return cur2;            
            cur2 = cur2.next;        
        }        
        return null;
        }
    }
