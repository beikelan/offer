二叉树的深度
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
import java.util.Stack;
public class Solution {
    public int TreeDepth(TreeNode root) {
        //思路1：递归
        //思路2：非递归  借助栈
        if(root==null)return 0;
        int left=TreeDepth(root.left); 
        int right=TreeDepth(root.right);
        return left>right?left+1:right+1;
    }
}
---------------------------------------------------------
//import java.util.Math;
public class Solution {
        public boolean IsBalanced_Solution(TreeNode root) {
        if(root==null)return true;
        if(Math.abs(TreeDepth(root.left)-TreeDepth(root.right))>1)return false;
        else return IsBalanced_Solution(root.left)&&IsBalanced_Solution(root.right);
    }
        
         public int TreeDepth(TreeNode root) {
        //思路1：递归
        //思路2：非递归  借助栈
        if(root==null)return 0;
        int left=TreeDepth(root.left); 
        int right=TreeDepth(root.right);
        return left>right?left+1:right+1;
    }
    
}
//借助上题二叉树的深度 平衡二叉树，每个节点左右子树的高度差不大于1