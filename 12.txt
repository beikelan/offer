连续子数组最大和
public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
        //如果前几项的和小于0，则没有必要再与后面的数相加，所以前几项的数据和清零
        int cur=array[0];//连续几项的和
        int sum=array[0];
       // if(array==null)return;
        for(int i=1;i<array.length;i++)
        {
            if(cur<0)
            {
                cur=array[i];
            }else{
                cur+=array[i];
            }
            if(cur>sum)
            {
                sum=cur;
            }
        }
        return sum;
    }
}
---------------------------------
整数1出现次数
public class Solution {
    public int NumberOf1Between1AndN_Solution(int n) {
    int count=0;
    int base=1;
    int round=n;
    if(n<0)return 0;
    while(round>0)
    {
        int weight=round%10;
        round/=10;
        count+=round*base;
        if(weight==1){
            count+=(n%base)+1;
        }else if(weight>1){
            count+=base;
        }
        base*=10;
    }
    return count;
    } 
}