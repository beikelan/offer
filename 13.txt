第一个只出现一次的字符（hash表）
public class Solution {
    public int FirstNotRepeatingChar(String str) {
        //用hash进行快速查询
        int[] hash=new int[256];
        for(int i=0;i<str.length();i++){
            int tem=str.charAt(i);
            hash[tem]++;
        }
        for(int i=0;i<str.length();i++){
            int tem=str.charAt(i);
            if(hash[tem]==1){
                return i;
            }
        }
        return -1;
    }
}
------------------------------------
丑数（跟已经保存的丑数对比）

import java.util.*;
 
public class Solution {
    public int GetUglyNumber_Solution(int index) {
        if(index<=0)
            return 0;
        ArrayList<Integer> list = new ArrayList<Integer>();
        //add进第一个丑数1
        list.add(1);
        //三个下标用于记录丑数的位置
        int i2=0,i3=0,i5=0;
        while(list.size()<index){
            //三个数都是可能的丑数，取最小的放进丑数数组里面
            int n2=list.get(i2)*2;
            int n3=list.get(i3)*3;
            int n5=list.get(i5)*5;
            int min = Math.min(n2,Math.min(n3,n5));
            list.add(min);
            if(min==n2)
                i2++;
            if(min==n3)
                i3++;
            if(min==n5)
                i5++;
        }
        return list.get(list.size()-1);
    }
}
--------------------------------------------
把数组排成最小的数（重写compare方法）
import java.util.Collections;
import java.util.ArrayList;
import java.util.Comparator;
public class Solution {
    public String PrintMinNumber(int [] numbers) {
//注意的点
//1.两个数字拼接起来，有可能造成数据溢出，所以是一个隐含的大数问题，因此要把数字转换成字符串处理
 //重写override方法       
      String ss="";
      if(numbers.length==0||numbers==null)return "";
      ArrayList<Integer> list=new ArrayList<Integer>();
      for(int i=0;i<numbers.length;i++){
          list.add(numbers[i]);
      }
      Collections.sort(list,new Comparator<Integer>(){
                //对数组numbers用自定义方法排序
                public int compare(Integer o1, Integer o2) {
                    //重写compare方法来比较o1,o2的大小，当o1+""+o2和o2+""+o1
                    //都是字符串，比较o1,o2的大小其实是比较两个子串的大小
                    return (o1+""+o2).compareTo(o2+""+o1);
                }
            });
            for(int j:list)
            {
                ss+=j;
            }
            return ss;
        }
    }
